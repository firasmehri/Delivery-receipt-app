delivery-receipt-app/
├── public/
│   ├── css/
│   │   └── styles.css
│   ├── js/
│   │   └── scripts.js
│   ├── uploads/
│   └── index.html
├── routes/
│   └── routes.js
├── .env
├── package.json
└── server.js
2. Create HTML Page for the App Interface
public/index.html
html
Copier le code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delivery Receipt</title>
    <link rel="stylesheet" href="css/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
</head>
<body>
    <header>
        <h1>Arten Solutions</h1>
    </header>
    <main>
        <section class="left-section">
            <h2>Terms and Conditions</h2>
            <div class="terms-box">
                <!-- Terms and Conditions text here -->
            </div>
            <div class="checkbox">
                <input type="checkbox" id="accept-terms">
                <label for="accept-terms">Accept Terms and Conditions</label>
            </div>
            <div class="signature-section">
                <h2>Sign Here</h2>
                <canvas id="signature-pad" width="300" height="100"></canvas>
                <button id="clear-signature">Clear</button>
            </div>
            <div class="pictures-section">
                <h2>Pictures</h2>
                <div id="pictures"></div>
                <button id="take-picture">Take Picture</button>
            </div>
        </section>
        <section class="right-section">
            <h2>Your Invoice</h2>
            <input type="file" id="invoice-upload" accept="application/pdf">
            <iframe id="invoice-preview" width="100%" height="600px"></iframe>
        </section>
        <button id="submit-button">Submit</button>
        <div id="confirmation-message"></div>
    </main>
    <script src="js/scripts.js"></script>
</body>
</html>
public/css/styles.css
css
Copier le code
body {
    font-family: Arial, sans-serif;
    background: linear-gradient(to bottom, black, blue, red);
    color: white;
    margin: 0;
    padding: 0;
}

header {
    background-color: darkgrey;
    text-align: center;
    padding: 10px 0;
}

main {
    display: flex;
    flex-direction: row;
    padding: 20px;
}

.left-section {
    flex: 1;
    padding: 20px;
    background: #f0f0f0;
    color: #333;
}

.right-section {
    flex: 2;
    padding: 20px;
}

.terms-box {
    height: 200px;
    overflow-y: scroll;
    background: #e0e0e0;
    padding: 10px;
    border: 1px solid #ccc;
}

.checkbox {
    margin: 10px 0;
}

.signature-section {
    margin: 20px 0;
}

#signature-pad {
    border: 1px solid #ccc;
}

.pictures-section {
    margin: 20px 0;
}

#pictures {
    display: flex;
    flex-wrap: wrap;
}

#pictures img {
    width: 100px;
    height: 100px;
    margin: 5px;
    position: relative;
}

#pictures img .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    background: red;
    color: white;
    border: none;
    cursor: pointer;
}

#submit-button {
    display: block;
    margin: 20px 0;
    padding: 10px;
    background-color: blue;
    color: white;
    border: none;
    cursor: pointer;
}

#confirmation-message {
    margin-top: 20px;
    background: grey;
    color: white;
    padding: 10px;
    display: none;
}
public/js/scripts.js
js
Copier le code
document.addEventListener("DOMContentLoaded", function() {
    const signaturePad = new SignaturePad(document.getElementById('signature-pad'));
    const invoiceUpload = document.getElementById('invoice-upload');
    const invoicePreview = document.getElementById('invoice-preview');
    const pictures = document.getElementById('pictures');
    const submitButton = document.getElementById('submit-button');
    const confirmationMessage = document.getElementById('confirmation-message');
    const acceptTermsCheckbox = document.getElementById('accept-terms');

    invoiceUpload.addEventListener('change', function() {
        const file = invoiceUpload.files[0];
        if (file) {
            const fileURL = URL.createObjectURL(file);
            invoicePreview.src = fileURL;
        }
    });

    document.getElementById('clear-signature').addEventListener('click', function() {
        signaturePad.clear();
    });

    document.getElementById('take-picture').addEventListener('click', function() {
        // Implement camera functionality here
    });

    submitButton.addEventListener('click', function() {
        if (!acceptTermsCheckbox.checked) {
            alert('You must accept the terms and conditions.');
            return;
        }
        if (signaturePad.isEmpty()) {
            alert('You must provide a signature.');
            return;
        }

        // Implement form submission here

        submitButton.style.backgroundColor = 'green';
        confirmationMessage.textContent = 'Thank you for choosing Arten Solutions LLC. Your delivery has been confirmed.';
        confirmationMessage.style.display = 'block';
    });
});
3. Set Up Backend to Handle File Uploads and Save Data
server.js
js
Copier le code
require('dotenv').config();
const express = require('express');
const multer = require('multer');
const path = require('path');
const nodemailer = require('nodemailer');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const fs = require('fs');
const ejs = require('ejs');

const app = express();
const PORT = 3000;

// Replace with your MongoDB Atlas connection string
const dbURI = process.env.MONGO_URI;

mongoose.connect(dbURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected successfully'))
.catch(err => console.error('MongoDB connection error:', err));

// Define a schema for storing invoice data
const invoiceSchema = new mongoose.Schema({
    invoice: String,
    terms: String,
    signature: String,
    pictures: [String],
    date: { type: Date, default: Date.now }
});

const Invoice = mongoose.model('Invoice', invoiceSchema);

// Configure multer for file storage
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'public/uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

const upload = multer({ storage });

app.set('view engine', 'ejs');

// Serve static files from the "public" directory
app.use(express.static('public'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Routes
app.use('/', require('./routes/routes'));

// Function to send an email with invoice details
function sendEmail(invoice) {
    const transporter = nodemailer.createTransport({
        service: 'Gmail',
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
        }
    });

    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: 'contact@artensolutions.com',
        subject: 'New Delivery Receipt Submitted',
        html: ejs.renderFile(path.join(__dirname, 'views', 'emailTemplate.ejs'), { invoice })
    };

    transporter.sendMail(mailOptions, (err, info) => {
        if (err) {
            console.error('Error sending email:', err);
        } else {
            console.log('Email sent:', info.response);
        }
    });
}

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
4. Implement Routes
routes/routes.js
js
Copier le code
const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const { Invoice } = require('../models/invoiceModel');
const upload = multer({ dest: 'public/uploads/' });

router.post('/upload', upload.single('invoice'), (req, res) => {
    const file








